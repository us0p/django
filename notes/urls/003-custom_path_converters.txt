For more complex matching requirements, you can define your own path 
converters.

Deprecated since version 5.1: Overriding existing converters with 
django.urls.register_converter() is deprecated.

A converter is a class that includes the following:
    1. A regex class attribute, as a string.
    2. A to_python(self, value) method, which handles converting the 
       matched string into the type that should be passed to the view 
       function. It should raise ValueError if it can’t convert the given 
       value. A ValueError is interpreted as no match and as a consequence 
       a 404 response is sent to the user unless another URL pattern 
       matches.
    3. A to_url(self, value) method, which handles converting the Python 
       type into a string to be used in the URL. It should raise ValueError
       if it can’t convert the given value. A ValueError is interpreted as 
       no match and as a consequence reverse() will raise NoReverseMatch 
       unless another URL pattern matches.

Example:

```python
class FourDigitYearConverter:
    regex = "[0-9]{4}"

    def to_python(self, value):
        return int(value)

    def to_url(self, value):
        return "%04d" % value
```

Register custom converter classes in your URLconf using register_converter():

```python
from django.urls import path, register_converter

from . import converters, views

register_converter(converters.FourDigitYearConverter, "yyyy")

urlpatterns = [
    path("articles/2003/", views.special_case_2003),
    path("articles/<yyyy:year>/", views.year_archive),
    ...,
]
```
