Asynchronous support
Middleware can support any combination of synchronous and asynchronous 
requests. Django will adapt requests to fit the middlewareâ€™s requirements 
if it cannot support both, but at a performance penalty.

By default, Django assumes that your middleware is capable of handling only
synchronous requests. To change these assumptions, set the following 
attributes on your middleware factory function or class:
- sync_capable is a boolean indicating if the middleware can handle 
  synchronous requests. Defaults to True.
- async_capable is a boolean indicating if the middleware can handle 
  asynchronous requests. Defaults to False.

If your middleware has both sync_capable = True and async_capable = True, 
then Django will pass it the request without converting it. In this case, 
you can work out if your middleware will receive async requests by checking
if the get_response object you are passed is a coroutine function, using 
asgiref.sync.iscoroutinefunction.

The django.utils.decorators module contains sync_only_middleware(), 
async_only_middleware(), and sync_and_async_middleware() decorators that 
allow you to apply these flags to middleware factory functions.

The returned callable must match the sync or async nature of the 
get_response method. If you have an asynchronous get_response, you must 
return a coroutine function (async def).

process_view, process_template_response and process_exception methods, if 
they are provided, should also be adapted to match the sync/async mode. 
However, Django will individually adapt them as required if you do not, at 
an additional performance penalty.

```python
from asgiref.sync import iscoroutinefunction
from django.utils.decorators import sync_and_async_middleware


@sync_and_async_middleware
def simple_middleware(get_response):
    # One-time configuration and initialization goes here.
    if iscoroutinefunction(get_response):

        async def middleware(request):
            # Do something here!
            response = await get_response(request)
            return response

    else:

        def middleware(request):
            # Do something here!
            response = get_response(request)
            return response

    return middleware
```

When using an asynchronous class-based middleware, you must ensure that 
instances are correctly marked as coroutine functions:

```python
from asgiref.sync import iscoroutinefunction, markcoroutinefunction


class AsyncMiddleware:
    async_capable = True
    sync_capable = False

    def __init__(self, get_response):
        self.get_response = get_response
        if iscoroutinefunction(self.get_response):
            markcoroutinefunction(self)

    async def __call__(self, request):
        response = await self.get_response(request)
        # Some logic ...
        return response
```
