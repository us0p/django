Settings

DJANGO_SETTINGS_MODULE
When you use Django, you have to tell it which settings you’re using. Do 
this by using an environment variable, DJANGO_SETTINGS_MODULE.
The value of DJANGO_SETTINGS_MODULE should be in Python path syntax, 
e.g. mysite.settings.

Default settings

A Django settings file doesn’t have to define any settings if it doesn’t 
need to. Each setting has a sensible default value. These defaults live in
the module django/conf/global_settings.py.
Here’s the algorithm Django uses in compiling settings:
    - Load settings from global_settings.py.
    - Load settings from the specified settings file, overriding the global
      settings as necessary.

Using settings in Python code
In your Django apps, use settings by importing the object 
django.conf.settings.

from django.conf import settings
if settings.DEBUG:
    # Do something
    ...

Note that django.conf.settings isn’t a module – it’s an object. So 
importing individual settings is not possible.
Also note that your code should not import from either global_settings or 
your own settings file. django.conf.settings abstracts the concepts of 
default settings and site-specific settings; it presents a single 
interface. It also decouples the code that uses settings from the location
of your settings.

You shouldn't alter settings in your applications at runtime.

Security
Because a settings file contains sensitive information, such as the 
database password, you should make every attempt to limit access to it. 
For example, change its file permissions so that only you and your web 
server’s user can read it. This is especially important in a shared-hosting
environment.

Either configure() or DJANGO_SETTINGS_MODULE is required
If you’re not setting the DJANGO_SETTINGS_MODULE environment variable, you
must call configure() at some point before using any code that reads 
settings.
If you don’t set DJANGO_SETTINGS_MODULE and don’t call configure(), Django
will raise an ImportError exception the first time a setting is accessed.
Also, it’s an error to call configure() more than once, or to call 
configure() after any setting has been accessed.

Calling django.setup() is required for “standalone” Django usage
If you’re using components of Django “standalone” – for example, writing a
Python script which loads some Django templates and renders them, or uses 
the ORM to fetch some data – there’s one more step you’ll need in addition
to configuring settings.
After you’ve either set DJANGO_SETTINGS_MODULE or called configure(), 
you’ll need to call django.setup() to load your settings and populate 
Django’s application registry.
Note that calling django.setup() is only necessary if your code is truly 
standalone. When invoked by your web server, or through django-admin, 
Django will handle this for you.
