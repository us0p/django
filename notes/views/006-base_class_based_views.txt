Base class-based views can be thought of as parent views, which can be used
by themselves or inherited from. They may not provide all the capabilities 
required for projects, in which case there are Mixins which extend what 
base views can do.

Djangoâ€™s generic views are built off of those base views, and were 
developed as a shortcut for common usage patterns such as displaying the 
details of an object. They take certain common idioms and patterns found in
view development and abstract them so that you can quickly write common 
views of data without having to repeat yourself.

Base views
- View: All views inherit from this class. It handles linking the view into
  the URLS, HTTP method dispatching and other common features.
- TemplateView: Extends the base class to make it also render a template.
- RedirectView: Provides a HTTP redirect.

Subclassing generic views
A powerful way to use generic views is to inherit from an existing view and
override attributes (such as the template_name) or methods (such as 
get_context_data) in your subclass to provide new values or methods. 
Consider, for example, a view that just displays one template, about.html. 
Django has a generic view to do this - TemplateView - so we can subclass 
it, and override the template name:

```python
# some_app/views.py
from django.views.generic import TemplateView


class AboutView(TemplateView):
    template_name = "about.html"
```
