More information:
https://docs.djangoproject.com/en/5.1/ref/class-based-views/mixins/

Django’s built-in class-based views provide a lot of functionality, but
some of it you may want to use separately this is true most past of the
time when you can't for some reason use a given class based views.

Mixins provide more discrete functionality.

Context and template responses
Two central mixins are provided that help in providing a consistent
interface to working with templates in class-based views.

TemplateResponseMixin
Every built in view which returns a TemplateResponse will call the
render_to_response() method that TemplateResponseMixin provides.

Attributes:
    - response_class: The response class to be returned by render_to_response
      method. Default is TemplateResponse. The template and context of
      TemplateResponse instances can be altered later.
      If you need custom template loading or custom context object
      instantiation, create a TemplateResponse subclass and assign it to
      response_class.

Methods:
    - render_to_response(context, **response_kwargs): Returns a
      self.response_class instance.
      If any keyword arguments are provided, they will be passed to the
      constructor of the response class.
      Calls get_template_names() to obtain the list of template names that
      will be searched looking for an existent template.

    - get_template_names(): Returns a list of template names to search for
      when rendering the template. The first template that is found will be
      used. The default implementation will return a list containing
      template_name (if it is specified).

ContextMixin
Every built in view which needs context data, such as for rendering a
template (including TemplateResponseMixin above), should call
get_context_data() passing any data they want to ensure is in there as
keyword arguments. in ContextMixin it returns its keyword arguments, but it
is common to override this to add more members to the dictionary.

Attributes:
    - extra_content: A dictionary to include in the context. This is a
      convenient way of specifying some context in as_view().

Methods:
    - get_context_data(**kwargs): Returns a dictionary representing the
      template context. The keyword arguments provided will make up the
      returned context. The template context of all class-based generic
      views include a view variable that points to the View instance.

SingleObjectMixin
Provides a mechanism for looking up an object associated with the current
HTTP request.

Attributes:
    - model: The modal that this view will display data for.
    - queryset: A QuerySet that represents the objects. If provided, the
      value of queryset spersedes the value provided for model.
      This is a class attribute with a mutable value so care must be taken
      when using it directly.
      Before using it, either call its all() method or retrieve it with
      get_queryset() which takes care of the cloning behind the scenes.
    - pk_url_kwarg: The name of the URLConf keyword argument that contains
      the primary key. By default is 'pk'.

Methods:
    - get_object(queryset=None): Returns the single object that this view
    will display. If queryset is provided, that queryset will be used as
    the source of objects; otherwise, get_queryset() will be used.
    - get_queryset(): Returns the queryset that will be used to retrieve
    the object that this view will display. By default, get_queryset()
    returns the value of the queryset attribute if it is set, otherwise it
    constructs a QuerySet by calling the all() method on the model
    attribute’s default manager.

SingleObjectTemplateResponseMixin
A mixin class that performs template-based response rendering for views
that operate upon a single object instance. Requires that the view it is
mixed with provides self.object, the object instance that the view is
operating on. self.object will usually be, but is not required to be, an
instance of a Django model. It may be None if the view is in the process of
constructing a new instance.

MultipleObjectMixin
Can be used to display a list of objects

Attributes:
    - ordering: A string or list of strings specifying the ordering to 
      apply to the queryset.
    - paginate_by: An integer specifying how many objects should be 
      displayed per page.
    - page_kwarg: A string specifying the name to use the page parameter.
    - paginator_class: The paginator class to be used for pagination. By 
      default, django.core.paginator.Paginator is used.

Methods:
    - get_ordering(): Returns a string (or iterable of string) that defines
      the ordering that will be applied to the queryset. Returns ordering 
      by default.
    - paginate_queryset(queryset, page_size): Returns a 4-tuple containing 
      (paginator, page, object_list, is_paginated).
    - get_paginate_by(queryset): Returns the number of items to paginate 
      by, or None for no pagination. By default returns the value of 
      paginate_by.
    - get_paginator(
	queryset,
	per_page,
	orphans=0,
	allow_empty_first_page=True
    ): Returns an instance of the paginator to use for this view. By 
      default, instantiates an instance of paginator_class.

MultipleObjectTemplaseResponseMixin
A mixin class that performs template-based response rendering for views 
that operate upon a list of object instances.
Requires that the view it'is mixed with provides self.object_list, the list
of object instances that the view is operating on.

FormMixin
Provides facilities for creating and displaying forms.

ModelFormMixin
A form mixin that works on ModelForms, rather than a standalone form.
Since this is a subclass of SingleObjectMixin, instances of this mixin have
access to the model and queryset attributes, describing the type of object 
that the ModelForm is manipulating.

DeletionMixin
Enables handling of the DELETE HTTP action.

Methods:
    - delete(request, *args, **kwargs): Retrieves the target object and 
      calls its delete() method, then redirects to the success URL.
