Subquery()
Add explicit subquery to a QuerySet.
For example, to annotate each post with the email address of the author of
the newest comment on that post:

from django.db.models import OuterRef, Subquery

newest = Comment.objects.filter(
    post=OuterRef("pk")
).order_by("-created_at")

Post.objects.annotate(
    newest_commenter_email=Subquery(
	# values is used to return a single column.
	# [:1] is used to return only a single row, essentially it 
	# represents a LIMIT clause.
	# Using get() instead of a slice would fail because the OuterRef 
	# cannot be resolved until the queryset is used within a Subquery.
	newest.values("email")[:1]
    )
)

OuterRef()
Use when a queryset in a Subquery needs to refer to a field from the outer
query or its transform. It acts like an F expression except that the check
to see if it refers to a valid field isn’t made until the outer queryset is
resolved.

Instances of OuterRef may be used in conjunction with nested instances of 
Subquery to refer to a containing queryset that isn’t the immediate parent.
For example, this queryset would need to be within a nested pair of 
Subquery instances to resolve correctly:

Book.objects.filter(author=OuterRef(OuterRef("pk")))

Exists()
Exists is a Subquery subclass that uses an SQL EXISTS statement. In many 
cases it will perform better than a subquery since the database is able to
stop evaluation of the subquery when a first matching row is found.
It’s unnecessary to force Exists to refer to a single column, since the 
columns are discarded and a boolean result is returned. Similarly, since 
ordering is unimportant within an SQL EXISTS subquery and would only 
degrade performance, it’s automatically removed.
You can query using NOT EXISTS with ~Exists().
